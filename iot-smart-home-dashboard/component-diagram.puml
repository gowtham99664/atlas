@startuml IoT_Smart_Home_Dashboard_Components

!theme plain
!include <C4/C4_Component>

title IoT Smart Home Dashboard - Component Architecture (v2.1)

Container_Boundary(app, "IoT Smart Home Dashboard Application") {
    
    Component(ui, "Console Interface", "Java Console", "Handles user input and display using number-based selection system")
    
    Component(core_service, "Smart Home Service", "Java Service", "Core business logic orchestration and auto-aligned table display (v2.1)")
    
    Component_Ext(table_system, "Auto-Aligned Table System", "Helper Classes", "TableDimensions & TableFormatStrings for intelligent column sizing")
    
    Container_Boundary(services, "Service Layer") {
        Component(customer_svc, "Customer Service", "Java Service", "User management, authentication, BCrypt password hashing")
        Component(gadget_svc, "Gadget Service", "Java Service", "Device validation, 18+ device types, 38+ room types")
        Component(timer_svc, "Timer Service", "Java Service", "Device scheduling with countdown timers")
        Component(health_svc, "Device Health Service", "Java Service", "Real-time health monitoring with diagnostics")
        Component(scenes_svc, "Smart Scenes Service", "Java Service", "One-click automation for 8 predefined scenarios")
        Component(energy_svc, "Energy Management Service", "Java Service", "Power consumption tracking and analytics")
        Component(calendar_svc, "Calendar Event Service", "Java Service", "Event-based automation scheduling")
        Component(weather_svc, "Weather Service", "Java Service", "Weather-based device suggestions")
    }
    
    Container_Boundary(models, "Data Models") {
        Component(customer_model, "Customer Entity", "Java Class", "User data with security features (lockout, failed attempts)")
        Component(gadget_model, "Gadget Entity", "Java Class", "Smart device with usage tracking and timer support")
    }
    
    Container_Boundary(utils, "Utility Layer") {
        Component(session_mgr, "Session Manager", "Singleton", "User session state management")
        Component(db_config, "Database Config", "Java Class", "DynamoDB Local connection with fallback to demo mode")
        Component(password_util, "Password Utility", "Java Class", "Secure password input handling")
    }
}

Container_Boundary(external, "External Systems") {
    SystemDb(dynamodb, "DynamoDB Local", "AWS NoSQL Database running locally on port 8000")
    System_Ext(bcrypt, "BCrypt Library", "Password hashing and verification")
    System_Ext(aws_sdk, "AWS SDK v2", "DynamoDB Enhanced Client")
}

' Main relationships
Rel(ui, core_service, "Uses", "Business operations")
Rel(core_service, table_system, "Uses", "Table formatting")

Rel(core_service, customer_svc, "Manages", "User operations")
Rel(core_service, gadget_svc, "Manages", "Device operations")
Rel(core_service, timer_svc, "Manages", "Scheduling")
Rel(core_service, health_svc, "Manages", "Health monitoring")
Rel(core_service, scenes_svc, "Manages", "Scene automation")
Rel(core_service, energy_svc, "Manages", "Energy tracking")
Rel(core_service, calendar_svc, "Manages", "Calendar events")
Rel(core_service, weather_svc, "Manages", "Weather suggestions")

Rel(customer_svc, customer_model, "Creates/Updates", "CRUD operations")
Rel(gadget_svc, gadget_model, "Creates/Validates", "Device management")

Rel(timer_svc, gadget_model, "Schedules", "Timer operations")
Rel(health_svc, gadget_model, "Analyzes", "Health checks")
Rel(scenes_svc, gadget_model, "Controls", "Scene execution")
Rel(energy_svc, gadget_model, "Monitors", "Energy tracking")
Rel(calendar_svc, gadget_model, "Automates", "Event actions")
Rel(weather_svc, gadget_model, "Suggests", "Weather-based actions")

Rel(core_service, session_mgr, "Uses", "Session management")
Rel(customer_svc, db_config, "Uses", "Database operations")
Rel(ui, password_util, "Uses", "Secure input")

Rel(customer_svc, bcrypt, "Uses", "Password hashing")
Rel(db_config, aws_sdk, "Uses", "Database client")
Rel(db_config, dynamodb, "Connects", "TCP/8000")

' Data relationships
Rel(customer_model, gadget_model, "Owns", "1 to many")
Rel(session_mgr, customer_model, "Tracks", "Current user")

LAYOUT_LEFT_RIGHT()

@enduml