@startuml IoT_Smart_Home_Dashboard_DataModel

!theme plain

title IoT Smart Home Dashboard - Data Model & Entity Relationships

' Entity definitions
entity "Customer" as customer {
    **Primary Key**
    --
    * email : String <<PK>>
    --
    **Basic Information**
    --
    * fullName : String
    * password : String (BCrypt hashed)
    --
    **Security Features**
    --
    failedLoginAttempts : int
    accountLockedUntil : LocalDateTime
    lastFailedLoginTime : LocalDateTime
    --
    **Device Ownership**
    --
    gadgets : List<Gadget>
}

entity "Gadget" as gadget {
    **Device Identity**
    --
    * type : String (TV, AC, FAN, etc.)
    * model : String (Brand/Model name)
    * roomName : String (Location)
    --
    **Status & Control**
    --
    status : String (ON/OFF)
    powerRatingWatts : double
    --
    **Usage Tracking**
    --
    lastOnTime : LocalDateTime
    lastOffTime : LocalDateTime
    totalUsageMinutes : long
    totalEnergyConsumedKWh : double
    --
    **Timer Features**
    --
    scheduledOnTime : LocalDateTime
    scheduledOffTime : LocalDateTime
    timerEnabled : boolean
}

' Enumerations
enum GadgetType {
    TV
    AC
    FAN
    LIGHT
    SWITCH
    CAMERA
    DOOR_LOCK
    GEYSER
    DOORBELL
    VACUUM
    AIR_PURIFIER
    SPEAKER
    WATER_PURIFIER
    THERMOSTAT
    WASHING_MACHINE
    REFRIGERATOR
    MICROWAVE
}

enum GadgetStatus {
    ON
    OFF
}

enum HealthStatus {
    EXCELLENT (80-100%)
    GOOD (60-79%)
    WARNING (40-59%)
    CRITICAL (<40%)
}

' Service-level entities (not stored in DB)
class "DeviceHealth" as health {
    gadget : Gadget
    healthScore : double (0-100)
    healthStatus : HealthStatus
    diagnosticMessage : String
    recommendations : List<String>
}

class "EnergyReport" as energy {
    totalEnergyKWh : double
    totalCostRupees : double
    avgDailyUsage : double
    peakUsageHour : String
    efficiencyRating : String
    recommendations : List<String>
}

class "SceneExecutionResult" as scene {
    sceneName : String
    success : boolean
    actionsPerformed : List<SceneAction>
    message : String
}

class "SceneAction" as action {
    deviceType : String
    action : String
    success : boolean
    message : String
}

class "CalendarEvent" as calendar {
    eventType : String
    dateTime : LocalDateTime
    duration : int
    automationActions : List<AutomationAction>
}

class "AutomationAction" as automation {
    deviceType : String
    action : String
    delayMinutes : int
}

class "WeatherData" as weather {
    temperature : double
    humidity : double
    airQuality : int
    condition : String
    forecast : String
}

class "WeatherAutomationRule" as weatherRule {
    condition : String
    deviceType : String
    action : String
    threshold : double
}

class "SystemHealthReport" as systemHealth {
    overallSystemHealth : double
    healthyDevices : int
    warningDevices : int
    criticalDevices : int
    deviceHealthList : List<DeviceHealth>
}

' Table System Helper Classes (v2.1)
class "TableDimensions" as tableDim {
    numWidth : int
    deviceWidth : int
    powerWidth : int
    statusWidth : int
    usageWidth : int
    energyWidth : int
}

class "TableFormatStrings" as tableFormat {
    borderFormat : String
    headerFormat : String
    rowFormat : String
    emptyRowFormat : String
}

' Session management
class "SessionManager" as session {
    - instance : SessionManager (Singleton)
    - currentUser : Customer
    + getInstance() : SessionManager
    + login(customer) : void
    + logout() : void
    + isLoggedIn() : boolean
}

' Database configuration
class "DynamoDBConfig" as dbConfig {
    - ENDPOINT : String = "http://localhost:8000"
    - REGION : Region = US_EAST_1
    - dynamoDbClient : DynamoDbClient
    - enhancedClient : DynamoDbEnhancedClient
    + getEnhancedClient() : DynamoDbEnhancedClient
    + isConnectionAvailable() : boolean
}

' DynamoDB Table Schema
package "DynamoDB Local (Port 8000)" {
    class "customers" as table {
        **Table Name**: customers
        **Partition Key**: email (String)
        --
        **Attributes**:
        - fullName (String)
        - password (String - BCrypt)
        - gadgets (List of Gadget objects)
        - failedLoginAttempts (Number)
        - accountLockedUntil (DateTime)
        - lastFailedLoginTime (DateTime)
    }
}

' Relationships
customer ||--o{ gadget : owns
gadget }o--|| GadgetType : type
gadget }o--|| GadgetStatus : status

health }o--|| gadget : analyzes
health }o--|| HealthStatus : classified as

energy }o--|| customer : generated for
scene }o--|| action : contains
calendar }o--|| automation : triggers
systemHealth }o--|| health : aggregates

session }o--|| customer : tracks current
dbConfig ||--|| table : connects to
customer ||--|| table : stored in

' Auto-Aligned Table System relationships (v2.1)
tableDim ||--|| tableFormat : used to create
tableDim }o--|| gadget : calculated from
tableFormat }o--|| gadget : formats display of

' Validation rules
note right of customer : "**Security Rules:**\n- Email: Valid format required\n- Password: 8-128 chars, mixed case,\n  numbers, special chars\n- Account lockout: 5min → 15min → 60min\n- BCrypt hashing with salt"

note right of gadget : "**Business Rules:**\n- One device type per room\n- 18+ supported device categories\n- 350+ Indian market models\n- 38+ room types supported\n- Real-time usage calculations"

note right of health : "**Health Scoring:**\n- 0-100% calculated score\n- Device-specific diagnostics\n- Energy efficiency factors\n- Maintenance recommendations"

note right of energy : "**Energy Calculations:**\n- Real-time consumption tracking\n- Session-based measurements\n- Efficiency ≤ 100% validation\n- Cost analysis in Indian Rupees"

note right of tableDim : "**v2.1 Enhancement:**\nAuto-aligned table system\nwith intelligent column sizing\nNo truncation, dynamic width"

note bottom of table : "**Demo Mode Fallback:**\nWhen DynamoDB unavailable:\n- Uses HashMap<String, Customer>\n- All functionality preserved\n- Data lost on app shutdown"

@enduml